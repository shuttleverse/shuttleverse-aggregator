name: CI/CD

on:
  push:
    branches:
      - main
  pull_request:
    branches:
      - '**'

jobs:
  # CI for pull requests
  ci:
    name: Build, Test, and Security Check
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Cache Maven packages
        uses: actions/cache@v3
        with:
          path: ~/.m2
          key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
          restore-keys: |
            ${{ runner.os }}-maven-

      - name: Install Dependencies
        run: ./mvnw dependency:resolve

      #      - name: Run OWASP Dependency Check
      #        run: ./mvnw org.owasp:dependency-check-maven:check -DnvdApiKey=${{ secrets.NVD_API_KEY }}

      - name: Run Google Checkstyle
        run: ./mvnw checkstyle:check

      - name: Run Tests
        run: ./mvnw test

  # CD for main branch
  cd:
    name: Build & Push Docker Image
    runs-on: ubuntu-latest
    if: github.event_name == 'push' && github.ref == 'refs/heads/main'

    permissions:
      id-token: write # Required to receive OIDC tokens

    steps:
      - name: Checkout Code
        uses: actions/checkout@v4

      - name: Set up JDK 17
        uses: actions/setup-java@v4
        with:
          java-version: '17'
          distribution: 'temurin'

      - name: Log in to Docker Hub
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USERNAME }}
          password: ${{ secrets.DOCKER_PASSWORD }}

      - name: Build Docker Image
        run: docker build -t ${{ secrets.DOCKER_USERNAME }}/shuttleverse-aggregator:latest --build-arg SPRING_PROFILE=prod .

      - name: Push Docker Image
        run: docker push ${{ secrets.DOCKER_USERNAME }}/shuttleverse-aggregator:latest

      - name: Create OIDC Token
        id: create-oidc-token
        run: |
          AUDIENCE="oke-kubernetes-cluster"
          OIDC_URL_WITH_AUDIENCE="$ACTIONS_ID_TOKEN_REQUEST_URL&audience=$AUDIENCE"
          IDTOKEN=$(curl \
            -H "Authorization: Bearer $ACTIONS_ID_TOKEN_REQUEST_TOKEN" \
            -H "Accept: application/json; api-version=2.0" \
            "$OIDC_URL_WITH_AUDIENCE" | jq -r .value)
          echo "::add-mask::${IDTOKEN}"
          echo "idToken=${IDTOKEN}" >> $GITHUB_OUTPUT
          
      - name: Check Permissions in Kubernetes
        run: |
          kubectl \
          --token=$ \
          --server= ${{ secrets.OKE_SERVER }} \
          --insecure-skip-tls-verify \
          auth can-i --list

      - name: Create Kubernetes Secret for MongoDB URI
        run: |
          kubectl \
            --token=$ \
            --server=${{ secrets.OKE_SERVER }} \
            --insecure-skip-tls-verify \
            create secret generic mongodb-secret \
              --from-literal=MONGODB_PROD_URI=${{ secrets.MONGODB_PROD_URI }}

      - name: Inject Docker Username into Deployment YAML
        run: |
          sed -i "s|docker-user|${{ secrets.DOCKER_USERNAME }}|g" k8s/deployment.yaml


      - name: Deploy to Kubernetes
        run: |
          kubectl \
            --token=$ \
            --server=${{ secrets.OKE_SERVER }} \
            --insecure-skip-tls-verify \
            apply -f deployment.yaml




